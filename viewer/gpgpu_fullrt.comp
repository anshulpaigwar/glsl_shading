#version 430 core

layout(binding = 0, rgba32f) uniform writeonly image2D framebuffer;

uniform sampler2D colorTexture;
uniform mat4 mat_inverse;
uniform mat4 persp_inverse;
uniform float lightIntensity;
uniform vec3 lightPosition;
uniform float shininess;
uniform float eta;
uniform vec3 bbmin;
uniform vec3 bbmax;
uniform float radius;
uniform float groundDistance;
uniform vec3 center;

#define MAX_SCENE_BOUNDS    10.0
#define EPS                 0.000001
#define M_PI 3.14159265358979323846

struct hitinfo_t {
    vec4 t;
    int hit_vptr;
};

layout (std430, binding = 1) buffer Vertices
{
    vec4 vertices[];
};

layout (std430, binding = 2) buffer Normals
{
    vec4 normals[];
};

layout (std430, binding = 3) buffer Colors
{
    vec4 colors[];
};

layout (std430, binding = 4) buffer Meshes
{
    int indices[];
};

vec4 getColorFromEnvironment(in vec3 direction)
{

    float phi= acos(direction.z /length(direction))/M_PI; // secid param
    float theta = atan(direction.y, direction.x)/ (2*M_PI) + 0.5;
    vec4 col = texture (colorTexture, vec2(theta, phi));

    return col;
}

float FresnelReflectAmount ( float n1, float n2, vec3 normal, vec3 incident)
{
        // Schlick aproximation
        normal = normalize(normal);
        incident = normalize(incident);
        float r0 = (n1-n2) / (n1+n2);
        r0 *= r0;
        float cosX = -dot(normal, incident);
        float x = 1.0-cosX;
        float ret = r0+(1.0-r0)*x*x*x*x*x;

        // adjust reflect multiplier for object reflectivity
       ret = (eta + (1.0-eta) * ret);
        return ret;
}


bool intersectBoundingBox(vec4 origin, vec4 dir) {

    float tmin = (bbmin.x - origin.x) /dir.x;
    float tmax = (bbmax.x -origin.x) /dir.x;
    float temp;

    if (tmin > tmax) // swap(tmin, tmax);
    {
      temp = tmax;
      tmax = tmin;
      tmin = temp;
    }

    float tymin = (bbmin.y -origin.y) /dir.y;
    float tymax = (bbmax.y -origin.y) /dir.y;

    if (tymin > tymax)// swap(tymin, tymax);
    {
      temp = tymax;
      tymax = tymin;
      tymin = temp;
    }
    if ((tmin > tymax) || (tymin > tmax))
    return false;

    if (tymin > tmin)
    tmin = tymin;

    if (tymax < tmax)
    tmax = tymax;

    float tzmin = (bbmin.z -origin.z) /dir.z;
    float tzmax = (bbmax.z -origin.z) /dir.z;

    if (tzmin > tzmax)// swap(tzmin, tzmax);
    {
      temp = tzmax;
      tzmax = tzmin;
      tzmin = temp;
    }
    if ((tmin > tzmax) || (tzmin > tmax))
    return false;

    if (tzmin > tmin)
    tmin = tzmin;

    if (tzmax < tmax)
    tmax = tzmax;

    return true;



}

bool intersectTriangle(vec4 origin, vec4 dir, int ptr, out vec4 dist)
{

  const float EPSILON = 0.0000001;
	vec4 v0 = vertices[indices[ptr]];
    vec4 v1 = vertices[indices[ptr + 1]];
    vec4 v2 = vertices[indices[ptr + 2]];

    vec3 e1 = v1.xyz - v0.xyz;
    vec3 e2 = v2.xyz - v0.xyz;
    vec3 h = cross (normalize(dir.xyz) ,e2);
    float a = dot(e1,h);
    if (abs(a) < EPSILON)
        return false;

    float f = 1.0/a;

    vec3 s = origin.xyz - v0.xyz;
    float alpha  = dot(h,s)*f;
    if (alpha < 0.0 || alpha > 1.0)
        return false;

    vec3 q = cross(s, e1);
    float beta = dot(q,normalize(dir.xyz))*f;
    if (beta < 0.0 || beta + alpha > 1.0)
        return false;

    float lambda = dot(q,e2)*f;


    if (abs(lambda) > EPSILON){
        dist = vec4(alpha,beta,1-alpha-beta,lambda);
        return true;
    }

}


vec4 interpolateNormal(hitinfo_t h)
{
    int ptr = h.hit_vptr;
    vec4 N0 = normalize(normals[ptr]);
    vec4 N1 = normalize(normals[ptr+1]);
    vec4 N2 = normalize(normals[ptr+2]);

    vec4 N_interpolate = normalize(h.t.x *N0 + h.t.y *N1 + h.t.z*N2);
    return N_interpolate;
}

vec4 interpolateColor(hitinfo_t h)
{
	// TODO
	return vec4(1);
}

bool isIntersected(vec4 origin, vec4 dir, out hitinfo_t h)
{
    vec4 dist; // stores distance + barycentric coord
	bool hit = false;
	h.t.x = radius * MAX_SCENE_BOUNDS;
	if(intersectBoundingBox(origin, dir)) {
		for(int j = 0; j < indices.length(); j += 3) {
			if(intersectTriangle(origin, dir, j, dist)) {
        if(!hit){
          h.t = dist;
          h.hit_vptr = j;
          hit = true;
        }
        else
        {
          if(h.t.w > dist.w){
            h.t = dist;
            h.hit_vptr = j;
          }
        }
			}
		}
	}
	return hit;
}

const int MAX_TRACE = 1;
/*
float FresnelReflectAmount (  vec4 normal, vec4 incident)
{
        // Schlick aproximation
        normal = normalize(normal);
        incident = normalize(incident);
        float r0 = (1 -eta) / (1+eta);
        r0 *= r0;
        float cosX = -dot(normal, incident);
        float x = 1.0-cosX;
        float ret = r0+(1.0-r0)*x*x*x*x*x;

        return ret;
}
*/

float FresnelReflectAmount(  vec4 normal, vec4 incident){
    float costheta = dot(normal, incident);
    float f0 = pow((1 - eta) / (1 + eta), 2);
    float fresnel = f0 + (1 - f0) * pow((1 - costheta), 5);
    return fresnel;
}

bool rayPlaneIntersect(vec4 origin, vec4 dir, vec4 planePoint, vec4 planeNormal, out vec4 intersectionPoint)
{

  float lambda = dot(planePoint - origin, planeNormal )/dot(dir, planeNormal);
  if (lambda < 0.0)
    return false;
  intersectionPoint =  origin + lambda*dir;
  return true;
}

vec4 trace(vec4 origin, vec4 dir)
{
	// TODO: trace a ray in the scene, see what it intersects, bounce around
  vec4 resultCol = vec4(0,0,0,0);

    hitinfo_t h;
    if(isIntersected(origin, dir, h))
    {
        vec4 intersectionPoint = origin + h.t.w*dir;
        hitinfo_t h2;
        vec4 n = interpolateNormal(h);

        float ambient = 0.2;
        float diffuse = 0.6 * max(0, dot(n, dir));
        float fresnel = 0.0;
        fresnel =  FresnelReflectAmount (n, dir);
        float specular = 0.4 * fresnel;
        vec4 vertCol;
        vertCol = vec4(1,0,0,0);

        if(isIntersected(intersectionPoint, -dir, h))  // shadow  ambient lighting only
        {
          resultCol =  vertCol* lightIntensity * (ambient + diffuse );
        }
        else // full illumination
        {
          resultCol = vertCol* lightIntensity * (ambient + diffuse + specular);
        }
    }
    else
     {

       vec4 vertCol;
       vertCol =  vec4(0,0,0,0);

       vec4 planePoint = vec4( groundDistance,0,0,0 );
       vec4 planeNormal = normalize(vec4(1,1,1, 0));
       vec4 intersectionPoint;
       hitinfo_t h;
       if(rayPlaneIntersect(origin, dir, planePoint, planeNormal, intersectionPoint ))
       {
         vertCol =  getColorFromEnvironment(dir.xyz);

         float ambient = 0.2;
         float diffuse = 0.6 * max(0, dot(planeNormal, dir));
         float fresnel = 0.0;
         fresnel =  FresnelReflectAmount (planeNormal, dir);
         float specular = 0.4 * fresnel;

         if(isIntersected(intersectionPoint, -dir, h))  // shadow  ambient lighting only
         {
           resultCol =  vertCol* lightIntensity * (ambient + diffuse );
         }
         else // full illumination
         {
           resultCol = vertCol* lightIntensity * (ambient + diffuse + specular);
         }

       }


       resultCol = vertCol;


     }
     return resultCol;
}

layout (local_size_x = 8, local_size_y = 8) in;
void main(void) {
    ivec2 pix = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(framebuffer);
    if (pix.x >= size.x || pix.y >= size.y) {
        return;
    }
    vec2 pos = pix / (size - vec2(0.5,0.5));
    // pos in [0,1]^2 Need it in [-1,1]^2:
    pos = 2 * pos - vec2(1.,1.);

    // Step 1: I need pixel coordinates.
    vec4 worldPos = vec4(pos.x, pos.y, 1.0, 1.0);
    worldPos = persp_inverse * worldPos;
    worldPos /= worldPos.w;
    worldPos.w = 0;
    worldPos = normalize(worldPos);
    // Step 2: ray direction:
    vec4 dir = normalize((mat_inverse * worldPos));
    vec4 eye = (mat_inverse * vec4(0, 0, 0, 1));
    vec4 color = trace(eye, dir);

    imageStore(framebuffer, pix, color);
}
